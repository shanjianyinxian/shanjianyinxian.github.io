<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>程小罗的虎啸山庄</title>
  
  
  <link href="https://shanjianyinxian.gitee.io/atom.xml" rel="self"/>
  
  <link href="https://shanjianyinxian.gitee.io/"/>
  <updated>2021-07-06T09:04:28.547Z</updated>
  <id>https://shanjianyinxian.gitee.io/</id>
  
  <author>
    <name>程小罗</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>hexo指令执行失败问题解决</title>
    <link href="https://shanjianyinxian.gitee.io/2021/07/06/hexo%E6%8C%87%E4%BB%A4%E6%89%A7%E8%A1%8C%E5%A4%B1%E8%B4%A5%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
    <id>https://shanjianyinxian.gitee.io/2021/07/06/hexo%E6%8C%87%E4%BB%A4%E6%89%A7%E8%A1%8C%E5%A4%B1%E8%B4%A5%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</id>
    <published>2021-07-06T08:45:55.000Z</published>
    <updated>2021-07-06T09:04:28.547Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>软件：hexo，hexo主题（bufferfly）</p></blockquote><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>今天重新部署hexo博客，出现了如下的问题，所有得hexo指令都报如下错误：</p><p><img src="/2021/07/06/hexo%E6%8C%87%E4%BB%A4%E6%89%A7%E8%A1%8C%E5%A4%B1%E8%B4%A5%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/hexo%E6%8A%A5%E9%94%99_%E9%97%AE%E9%A2%98.png" alt="hexo报错_问题"></p><hr><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>经过排查，原因是node版本太低。之前使用了nvm安装了多版本的node，当前切换到了低版本的node。这里切换回高版本即可解决问题。</p><img src="/2021/07/06/hexo%E6%8C%87%E4%BB%A4%E6%89%A7%E8%A1%8C%E5%A4%B1%E8%B4%A5%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/hexo报错_解决.png" alt="hexo报错_解决" style="zoom: 80%;">]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;软件：hexo，hexo主题（bufferfly）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h3&gt;&lt;p&gt;今天重新部署hexo</summary>
      
    
    
    
    <category term="技术" scheme="https://shanjianyinxian.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="hexo" scheme="https://shanjianyinxian.gitee.io/categories/%E6%8A%80%E6%9C%AF/hexo/"/>
    
    
    <category term="hexo" scheme="https://shanjianyinxian.gitee.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>好久不见</title>
    <link href="https://shanjianyinxian.gitee.io/2021/07/06/%E5%A5%BD%E4%B9%85%E4%B8%8D%E8%A7%81/"/>
    <id>https://shanjianyinxian.gitee.io/2021/07/06/%E5%A5%BD%E4%B9%85%E4%B8%8D%E8%A7%81/</id>
    <published>2021-07-06T06:59:13.000Z</published>
    <updated>2021-07-06T08:07:38.207Z</updated>
    
    <content type="html"><![CDATA[<p>好久没有更新自己的博客了，过完年之后工作十分忙碌，比赛，项目，运维等等一系列事情需要去做。当时觉得一直不更新也不好，于是中途关闭了自己的博客。虽然博客关了，但这段时间的工作也一直保持学习。工作的过程也会遇到很多问题， 每次问题的解决对个人来说也是一次成长。这次重新开通博客也是希望能和更多的人交流。</p><p>最后，最近gitee没法开启个人博客。因此暂时只保留github的页面。之后也会同步gitee的个人博客。主要是github可能有时候访问较慢，有了gitee之后会好很多。</p><p>以上。o(<em>￣▽￣</em>)ブ</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;好久没有更新自己的博客了，过完年之后工作十分忙碌，比赛，项目，运维等等一系列事情需要去做。当时觉得一直不更新也不好，于是中途关闭了自己的博客。虽然博客关了，但这段时间的工作也一直保持学习。工作的过程也会遇到很多问题， 每次问题的解决对个人来说也是一次成长。这次重新开通博客也</summary>
      
    
    
    
    <category term="生活" scheme="https://shanjianyinxian.gitee.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="随笔" scheme="https://shanjianyinxian.gitee.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>java反射读取类的私有属性并且读取实例属性值</title>
    <link href="https://shanjianyinxian.gitee.io/2021/03/18/java%E5%8F%8D%E5%B0%84%E8%AF%BB%E5%8F%96%E7%B1%BB%E7%9A%84%E7%A7%81%E6%9C%89%E5%B1%9E%E6%80%A7%E5%B9%B6%E4%B8%94%E8%AF%BB%E5%8F%96%E5%AE%9E%E4%BE%8B%E5%B1%9E%E6%80%A7%E5%80%BC/"/>
    <id>https://shanjianyinxian.gitee.io/2021/03/18/java%E5%8F%8D%E5%B0%84%E8%AF%BB%E5%8F%96%E7%B1%BB%E7%9A%84%E7%A7%81%E6%9C%89%E5%B1%9E%E6%80%A7%E5%B9%B6%E4%B8%94%E8%AF%BB%E5%8F%96%E5%AE%9E%E4%BE%8B%E5%B1%9E%E6%80%A7%E5%80%BC/</id>
    <published>2021-03-18T12:22:33.000Z</published>
    <updated>2021-07-10T09:40:55.500Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>软件：java8</p></blockquote><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>今天对自己写的代码分析，发现了很多不合适的地方，其中就有原先设计的bean不合理问题导致的后期需要重新侵入式的修改源代码，因此反射显得十分重要。</p><hr><p>反射可以用于使用bean匹配数据时候，当bean本身发生变化的时候，如果不使用反射，则需要修改程序中的原始代码，修改bean的getter才能获取到新的数据。如果使用反射则不需要知道bean中具体目前有哪些属性，直接可以获取到属性列表，然后根据属性列表获得bean对应实例的值。只需要修改bean即可，而不需要修改调用bean初的其他逻辑代码。</p><p>假设有个Person类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String gender;</span><br><span class="line">    <span class="comment">//private String city; //假设增加了一个新的属性city</span></span><br><span class="line"><span class="comment">// 省略get，set，有参空参构造，toString()</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果不使用反射，如果为Person增加了一个新的属性，则需要修改调用逻辑的源代码。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Person a = <span class="keyword">new</span> Person(<span class="string">&quot;pc&quot;</span>,<span class="number">26</span>,<span class="string">&quot;male&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//这里需要手动输入Person的私有属性名称，并且如果Person修改了属性，则这里也需要手动修改</span></span><br><span class="line">    List&lt;String&gt; fieldsNames = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    fieldsNames.add(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">    fieldsNames.add(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">    fieldsNames.add(<span class="string">&quot;gender&quot;</span>);</span><br><span class="line">    <span class="comment">//fieldsNames.add(&quot;city&quot;);</span></span><br><span class="line">    System.out.println(String.join(<span class="string">&quot;,&quot;</span>,fieldsNames));</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//这里需要手动调用Person的私有属性getter方法，并且如果Person修改了属性，则这里也需要手动修改</span></span><br><span class="line">    List&lt;String&gt; fieldsValues = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    fieldsValues.add(a.getName());</span><br><span class="line">    fieldsValues.add(a.getAge());</span><br><span class="line">    fieldsValues.add(a.getGender());</span><br><span class="line">    <span class="comment">//fieldsValues.add(a.getCity());</span></span><br><span class="line">    System.out.println(String.join(<span class="string">&quot;,&quot;</span>,fieldsValues));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在使用反射读取Person类的私有属性名称，并且读取实例的私有属性。如果修改了Person类属性，可以看到这段代码不需要做任何修改。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> <span class="keyword">throws</span> IllegalAccessException </span>&#123;</span><br><span class="line">    Person a = <span class="keyword">new</span> Person(<span class="string">&quot;pc&quot;</span>,<span class="number">26</span>,<span class="string">&quot;male&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方式1</span></span><br><span class="line">    <span class="comment">//Class clazz = a.getClass();</span></span><br><span class="line">    <span class="comment">//Field[] fields = clazz.getDeclaredFields();</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//方式2</span></span><br><span class="line">    Class clazz = Person.class;</span><br><span class="line">    Field[] fields = clazz.getDeclaredFields();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取类私有属性名称</span></span><br><span class="line">    List&lt;String&gt; fieldsNames = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span>(Field field: fields)&#123;</span><br><span class="line">        field.setAccessible(<span class="keyword">true</span>);<span class="comment">//对于私有属性必须要将访问权限打开</span></span><br><span class="line">        fieldsNames.add(field.getName());</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(String.join(<span class="string">&quot;,&quot;</span>,fieldsNames));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取类实例的属性值</span></span><br><span class="line">    List&lt;String&gt; fieldsValues = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span>(Field field: fields)&#123;</span><br><span class="line">        field.setAccessible(<span class="keyword">true</span>);<span class="comment">//对于私有属性必须要将访问权限打开</span></span><br><span class="line">        fieldsValues.add(field.get(a).toString());</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(String.join(<span class="string">&quot;,&quot;</span>,fieldsValues));</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;软件：java8&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h3&gt;&lt;p&gt;今天对自己写的代码分析，发现了很多不合适的地方，其中就</summary>
      
    
    
    
    <category term="技术" scheme="https://shanjianyinxian.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="java" scheme="https://shanjianyinxian.gitee.io/categories/%E6%8A%80%E6%9C%AF/java/"/>
    
    
    <category term="java" scheme="https://shanjianyinxian.gitee.io/tags/java/"/>
    
    <category term="反射" scheme="https://shanjianyinxian.gitee.io/tags/%E5%8F%8D%E5%B0%84/"/>
    
  </entry>
  
  <entry>
    <title>java中String和byte[]中文转换的问题</title>
    <link href="https://shanjianyinxian.gitee.io/2021/03/10/java%E4%B8%ADString%E5%92%8Cbyte-%E4%B8%AD%E6%96%87%E8%BD%AC%E6%8D%A2%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>https://shanjianyinxian.gitee.io/2021/03/10/java%E4%B8%ADString%E5%92%8Cbyte-%E4%B8%AD%E6%96%87%E8%BD%AC%E6%8D%A2%E7%9A%84%E9%97%AE%E9%A2%98/</id>
    <published>2021-03-10T09:23:01.000Z</published>
    <updated>2021-07-10T09:40:52.546Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>软件：java8</p></blockquote><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>今天在java的二进制byte和string类型的编解码中遇到了阻碍，因此仔细研究了一下相关的编解码问题。</p><hr><p>本文介绍了java中 byte[] 和 String 的相互转换。</p><p>通过String的getBytes()方法是可以得到一个字符串的字节数组，但特别要注意的是，getBytes()方法将返回该操作系统默认的编码格式的字节数组。 </p><ul><li><p>string转byte[] 无中文</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String strHello = <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line"><span class="keyword">byte</span>[] bHello = strHello.getBytes();</span><br></pre></td></tr></table></figure></li><li><p>byte[]转string 无中文</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String strHello = <span class="keyword">new</span> String(bHello);</span><br></pre></td></tr></table></figure></li><li><p>string转byte[] 有中文</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String strChinese = <span class="string">&quot;大吉大利&quot;</span>；</span><br><span class="line"><span class="keyword">byte</span>[] bChinese_gbk = strChinese.getBytes(<span class="string">&quot;GBK&quot;</span>); <span class="comment">//GBK编码格式</span></span><br><span class="line"><span class="keyword">byte</span>[] bChinese_utf8 = strChinese.getBytes(<span class="string">&quot;UTF-8&quot;</span>); <span class="comment">// UFT-8编码格式</span></span><br><span class="line"><span class="keyword">byte</span>[] bChinese_iso88591 = strChinese.getBytes(<span class="string">&quot;ISO8859-1&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p>byte[]转string 有中文</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String strChinese_gbk = <span class="keyword">new</span> String(bChinese_gbk,<span class="string">&quot;GBK&quot;</span>);</span><br><span class="line">String strChinese_utf8 = <span class="keyword">new</span> String(bChinese_utf8,<span class="string">&quot;UTF-8&quot;</span>); </span><br><span class="line">String strChinese_iso88591 = <span class="keyword">new</span> String(bChinese_iso88591,<span class="string">&quot;ISO8859-1&quot;</span>);</span><br><span class="line"><span class="comment">// &quot;ISO8859-1&quot;编码中无中文字符，因此strChinese_iso88591无法还原得到中文</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;软件：java8&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h3&gt;&lt;p&gt;今天在java的二进制byte和string类型的编解</summary>
      
    
    
    
    <category term="技术" scheme="https://shanjianyinxian.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="java" scheme="https://shanjianyinxian.gitee.io/categories/%E6%8A%80%E6%9C%AF/java/"/>
    
    
    <category term="java" scheme="https://shanjianyinxian.gitee.io/tags/java/"/>
    
    <category term="编解码" scheme="https://shanjianyinxian.gitee.io/tags/%E7%BC%96%E8%A7%A3%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>mysql-mysql5.5用户无需密码即可登录问题</title>
    <link href="https://shanjianyinxian.gitee.io/2020/11/30/mysql-mysql5-5%E7%94%A8%E6%88%B7%E6%97%A0%E9%9C%80%E5%AF%86%E7%A0%81%E5%8D%B3%E5%8F%AF%E7%99%BB%E5%BD%95%E9%97%AE%E9%A2%98/"/>
    <id>https://shanjianyinxian.gitee.io/2020/11/30/mysql-mysql5-5%E7%94%A8%E6%88%B7%E6%97%A0%E9%9C%80%E5%AF%86%E7%A0%81%E5%8D%B3%E5%8F%AF%E7%99%BB%E5%BD%95%E9%97%AE%E9%A2%98/</id>
    <published>2020-11-30T14:49:43.000Z</published>
    <updated>2020-12-02T02:53:47.306Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>软件：mysql5.5<br>操作系统：centos7</p></blockquote><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>今天在Linux上安装了mysql5.5，在创建了用户之后也正常设置了密码。但是登录的时候输入密码无法登录，但是不输入密码可以登录。</p><hr><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>使用root用户登录mysql，查看user表。</p><p>主要问题在于user表内含有账号和密码都为空的项。将其删除即可</p><p><img src="/2020/11/30/mysql-mysql5-5%E7%94%A8%E6%88%B7%E6%97%A0%E9%9C%80%E5%AF%86%E7%A0%81%E5%8D%B3%E5%8F%AF%E7%99%BB%E5%BD%95%E9%97%AE%E9%A2%98/1.jpg" alt="解决方案"></p><p>最后如果需要客户端远程访问，如Navicat，则需要以下命令</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">PRIVILEGES</span> <span class="keyword">ON</span> *.* <span class="keyword">TO</span> <span class="string">&#x27;你的用户名&#x27;</span>@<span class="string">&#x27;%&#x27;</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">&quot;你的密码&quot;</span>; </span><br><span class="line"></span><br><span class="line"><span class="keyword">FLUSH</span> <span class="keyword">PRIVILEGES</span>; </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;软件：mysql5.5&lt;br&gt;操作系统：centos7&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h3&gt;&lt;p&gt;今天在Linux</summary>
      
    
    
    
    <category term="技术" scheme="https://shanjianyinxian.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="mysql" scheme="https://shanjianyinxian.gitee.io/categories/%E6%8A%80%E6%9C%AF/mysql/"/>
    
    
    <category term="mysql" scheme="https://shanjianyinxian.gitee.io/tags/mysql/"/>
    
    <category term="数据库" scheme="https://shanjianyinxian.gitee.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>ELK-安装es集群</title>
    <link href="https://shanjianyinxian.gitee.io/2020/11/23/ELK-%E5%AE%89%E8%A3%85es%E9%9B%86%E7%BE%A4/"/>
    <id>https://shanjianyinxian.gitee.io/2020/11/23/ELK-%E5%AE%89%E8%A3%85es%E9%9B%86%E7%BE%A4/</id>
    <published>2020-11-23T11:30:18.000Z</published>
    <updated>2020-11-23T12:25:17.010Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>软件：elasticsearch-7.3.2</p></blockquote><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>假设三台主机</p><ul><li>centos0701 后续生命周期管理定位hot节点</li><li>centos0702 后续生命周期管理定位warm节点</li><li>centos0703 后续生命周期管理定位cold节点</li></ul><p>我们希望在每台主机上安装es实例，并且将三个es实例构成集群。</p><hr><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>这里使用docker方式安装。</p><p>修改三台主机hosts</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vim /etc/hosts</span></span><br><span class="line"></span><br><span class="line"><span class="number">192.168</span><span class="number">.73</span><span class="number">.131</span>   <span class="string">centos0701</span></span><br><span class="line"><span class="number">192.168</span><span class="number">.73</span><span class="number">.132</span>   <span class="string">centos0702</span></span><br><span class="line"><span class="number">192.168</span><span class="number">.73</span><span class="number">.133</span>   <span class="string">centos0703</span></span><br></pre></td></tr></table></figure><p>docker安装需要拉取镜像或者已有的镜像导入scp分发镜像/安装包</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scp es-7.3.2.tar centos0701:/home/docker-images</span><br></pre></td></tr></table></figure><p>装载镜像/解压缩es</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker load -i es-7.3.2.tar</span><br></pre></td></tr></table></figure><p> 三台机器ssh免密登录(非必须) </p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br><span class="line">ssh-copy-id centos0701</span><br><span class="line">ssh-copy-id centos0702</span><br><span class="line">ssh-copy-id centos0703</span><br></pre></td></tr></table></figure><p>如果三台机器开启了防火墙，则需要开放防火墙端口，这里开启的是es使用的9200端口（http外部访问）和9300端口（集群间通信）</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo firewall-cmd --zone=public --add-port=9200/tcp --permanent</span><br><span class="line">sudo firewall-cmd --zone=public --add-port=9300/tcp --permanent</span><br><span class="line">sudo firewall-cmd --reload</span><br><span class="line">sudo firewall-cmd --zone=public --list-port</span><br></pre></td></tr></table></figure><p>修改es的配置文件，如果是docker方式，则需要将配置文件挂载。   </p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#  vim es.yml</span></span><br><span class="line"><span class="comment">#集群名</span></span><br><span class="line"><span class="attr">cluster.name:</span> <span class="string">&quot;test&quot;</span></span><br><span class="line"><span class="comment">##本机节点名，根据不同的机器修改不同的名称</span></span><br><span class="line"><span class="attr">node.name:</span> <span class="string">&quot;node-1&quot;</span></span><br><span class="line"><span class="comment">## 当前节点是否可以被选举为master节点，是：true、否：false</span></span><br><span class="line"><span class="attr">node.master:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment">##集群生命周期节点配置hot/warm/cold</span></span><br><span class="line"><span class="comment">##这两项配置是为节点增加标签，具体名称并不是写死的，这个名称与后面模板和策略配置有关，后面会用到</span></span><br><span class="line"><span class="attr">node.attr.box_type:</span> <span class="string">hot</span></span><br><span class="line"><span class="attr">node.attr.rack:</span> <span class="string">rack1</span></span><br><span class="line"><span class="comment">##数据和日志存放位置，这里写的是docker内部的存放位置，后续可以挂载。</span></span><br><span class="line"><span class="attr">path.data:</span> <span class="string">/usr/share/elasticsearch/data</span></span><br><span class="line"><span class="attr">path.logs:</span> <span class="string">/usr/share/elasticsearch/logs</span></span><br><span class="line"><span class="comment">## 主机访问的端口号和网关,docker安装方式下publish_host必须写成es容器宿主机的ip否则会解析成docker的内部ip导致无法建立集群。</span></span><br><span class="line"><span class="attr">network.bind_host:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line"><span class="attr">network.publish_host:</span> <span class="number">192.168</span><span class="number">.73</span><span class="number">.131</span></span><br><span class="line"><span class="attr">http.port:</span> <span class="number">9200</span></span><br><span class="line"><span class="comment">##设置节点之间通信的端口</span></span><br><span class="line"><span class="attr">transport.tcp.port:</span> <span class="number">9300</span></span><br><span class="line"><span class="comment">## es7.x 之后新增的配置，写入候选主节点的设备地址，在开启服务后可以被选为主节点</span></span><br><span class="line"><span class="comment">## es7之后，不可使用旧版discovery.zen.ping.unicast.hosts这个参数，而用discovery.seed_hosts替换</span></span><br><span class="line"><span class="attr">discovery.seed_hosts:</span>  [<span class="string">&quot;192.168.73.131&quot;</span>,<span class="string">&quot;192.168.73.132&quot;</span>,<span class="string">&quot;192.168.73.133&quot;</span>]</span><br><span class="line"><span class="comment">## 集群从节点中选举master</span></span><br><span class="line"><span class="attr">cluster.initial_master_nodes:</span> [<span class="string">&quot;node-1&quot;</span>,<span class="string">&quot;node-2&quot;</span>,<span class="string">&quot;node-3&quot;</span>]</span><br></pre></td></tr></table></figure><p>三台机器启动docker或者运行es </p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -e ES_JAVA_OPTS=&quot;-Xms256m -Xmx256m&quot; -d -p 9200:9200 -p 9300:9300 \</span><br><span class="line">-v /home/moon/ELK/es/es.yml:/usr/share/elasticsearch/config/elasticsearch.yml \</span><br><span class="line">-v /home/moon/ELK/es/data:/usr/share/elasticsearch/data \</span><br><span class="line">-v /home/moon/ELK/es/logs:/usr/share/elasticsearch/logs \</span><br><span class="line">--name es docker.elastic.co/elasticsearch/elasticsearch:7.3.2</span><br></pre></td></tr></table></figure><p>一台机器启动kibana，这里在<code>centos0701</code>主机上运行。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run --name kibana -d -e &quot;ELASTICSEARCH_URL=http://192.168.73.131:9200&quot; -e &quot;SERVER_PORT=5601&quot;  -e &quot;SERVER_HOST=0.0.0.0&quot; -p 5601:5601 docker.elastic.co/kibana/kibana:7.3.2</span><br></pre></td></tr></table></figure><p>如果打开kibana网址显示<code>kibana server is not ready yet</code>，并且如果kibana日志显示<code>No living connections</code>的错误，则手动进入容器修改kibana.yml文件。如果是压缩包安装，则直接修改kibana.yml文件。具体修改server.host和elasticsearch.hosts。</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server.host:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line"><span class="attr">elasticsearch.hosts:</span> [ <span class="string">&quot;http://192.168.73.131:9200&quot;</span> ]</span><br></pre></td></tr></table></figure><p>看到集群信息即说明集群搭建成功，游览器输入一下网址查询集群信息。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;&#123;es的ip地址&#125;:9200&#x2F;_cat&#x2F;nodes?v</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;软件：elasticsearch-7.3.2&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h3&gt;&lt;p&gt;假设三台主机&lt;/p&gt;
&lt;u</summary>
      
    
    
    
    <category term="技术" scheme="https://shanjianyinxian.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="ELK" scheme="https://shanjianyinxian.gitee.io/categories/%E6%8A%80%E6%9C%AF/ELK/"/>
    
    
    <category term="ELK" scheme="https://shanjianyinxian.gitee.io/tags/ELK/"/>
    
    <category term="elasticsearch" scheme="https://shanjianyinxian.gitee.io/tags/elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>linux-centos7如何开启防火墙并且开放端口</title>
    <link href="https://shanjianyinxian.gitee.io/2020/11/18/linux-centos7%E5%A6%82%E4%BD%95%E5%BC%80%E5%90%AF%E9%98%B2%E7%81%AB%E5%A2%99%E5%B9%B6%E4%B8%94%E5%BC%80%E6%94%BE%E7%AB%AF%E5%8F%A3/"/>
    <id>https://shanjianyinxian.gitee.io/2020/11/18/linux-centos7%E5%A6%82%E4%BD%95%E5%BC%80%E5%90%AF%E9%98%B2%E7%81%AB%E5%A2%99%E5%B9%B6%E4%B8%94%E5%BC%80%E6%94%BE%E7%AB%AF%E5%8F%A3/</id>
    <published>2020-11-18T08:31:17.000Z</published>
    <updated>2020-11-18T09:11:55.395Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>软件：centos7</p></blockquote><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>在对外开放服务的时候需要使用到端口，但是需要注意防火墙时候开放了自己所需的端口。在每次对外开放端口的时候需要先检查防火墙的情况。</p><hr><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>使用<code>systemctl</code>服务管理工具管理防火墙</p><ul><li><p>检查防火墙运行状态</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ systemctl status firewalld.service</span><br></pre></td></tr></table></figure></li><li><p>启动防火墙</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ systemctl start firewalld.service</span><br></pre></td></tr></table></figure></li><li><p>关闭防火墙</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ systemctl stop firewalld.service</span><br></pre></td></tr></table></figure></li><li><p>开机启动防火墙</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ systemctl <span class="built_in">enable</span> firewalld.service</span><br></pre></td></tr></table></figure></li><li><p>开机禁用防火墙</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ systemctl <span class="built_in">disable</span> firewalld.service</span><br></pre></td></tr></table></figure></li></ul><p>使用<code>firewalld-cmd</code> 操作防火墙</p><ul><li><p>开启一个端口（举例：8888端口）:</p><p>–zone=public 作用域<br>–permanent 永久生效，没有此参数重启后失效<br>–add-port=8888/tcp 打开8888端口，tcp协议</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ firewall-cmd --zone=public --add-port=8888/tcp --permanent </span><br></pre></td></tr></table></figure></li><li><p>查看所有打开的端口： </p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ firewall-cmd --zone=public --list-ports</span><br></pre></td></tr></table></figure></li><li><p>更新防火墙规则，此步骤在对防火墙端口规则修改后一定要执行，否则修改不生效： </p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ firewall-cmd --reload</span><br></pre></td></tr></table></figure></li><li><p>禁止一个已开放端口 </p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ firewall-cmd --zone=public --remove-port=8888/tcp --permanent </span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;软件：centos7&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h3&gt;&lt;p&gt;在对外开放服务的时候需要使用到端口，但是需要注意防</summary>
      
    
    
    
    <category term="技术" scheme="https://shanjianyinxian.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="linux" scheme="https://shanjianyinxian.gitee.io/categories/%E6%8A%80%E6%9C%AF/linux/"/>
    
    
    <category term="linux" scheme="https://shanjianyinxian.gitee.io/tags/linux/"/>
    
    <category term="centos" scheme="https://shanjianyinxian.gitee.io/tags/centos/"/>
    
    <category term="firewalld" scheme="https://shanjianyinxian.gitee.io/tags/firewalld/"/>
    
  </entry>
  
  <entry>
    <title>es生命周期管理（简单版）</title>
    <link href="https://shanjianyinxian.gitee.io/2020/11/16/es%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E7%AE%A1%E7%90%86%EF%BC%88%E7%AE%80%E5%8D%95%E7%89%88%EF%BC%89/"/>
    <id>https://shanjianyinxian.gitee.io/2020/11/16/es%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E7%AE%A1%E7%90%86%EF%BC%88%E7%AE%80%E5%8D%95%E7%89%88%EF%BC%89/</id>
    <published>2020-11-16T05:43:37.000Z</published>
    <updated>2020-11-19T06:52:34.226Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>软件：ELK7.1.1</p></blockquote><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>对于单节点进行生命周期管理，一般只是想自动删除过期数据。这里进行一个简单的配置。按照次模板进行修改即可。  </p><hr><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>设置索引生命周期管理一般步骤是：</p><ul><li>设定生命周期策略</li><li>设定索引模板</li><li>指定第一个索引</li></ul><p>在kibana的console工具中按照如下步骤进行：</p><ul><li><p>创建一个生命周期管理策略，只配置hot（必须）和delete（可选）。<br>–hot阶段，配置rollover策略，在文档数量大于10时进行。<br>–delete阶段，删除40s前的数据。</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">PUT /_ilm/policy/nginx_ilm_policy</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;policy&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;phases&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;hot&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;actions&quot;</span>: &#123;</span><br><span class="line">                    <span class="attr">&quot;rollover&quot;</span>: &#123;</span><br><span class="line">                        <span class="attr">&quot;max_docs&quot;</span>: <span class="string">&quot;10&quot;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">&quot;delete&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;min_age&quot;</span>: <span class="string">&quot;40s&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;actions&quot;</span>: &#123;</span><br><span class="line">                    <span class="attr">&quot;delete&quot;</span>: &#123;&#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>新建index模板，这一步目的是将送进es的符”index_patterns”的index按照新的规则进行滚动，并且绑定刚刚创建的生命周期规则。</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">PUT /_template/nginx_ilm_template</span><br><span class="line">&#123;    </span><br><span class="line">    <span class="attr">&quot;index_patterns&quot;</span>: [<span class="string">&quot;nginx_logs-*&quot;</span>],    </span><br><span class="line">    <span class="attr">&quot;settings&quot;</span>: &#123;        </span><br><span class="line">        <span class="attr">&quot;number_of_shards&quot;</span>: <span class="number">1</span>,        </span><br><span class="line">        <span class="attr">&quot;number_of_replicas&quot;</span>: <span class="number">1</span>,        </span><br><span class="line">        <span class="attr">&quot;index.lifecycle.name&quot;</span>: <span class="string">&quot;nginx_ilm_policy&quot;</span>, </span><br><span class="line">        <span class="attr">&quot;index.lifecycle.rollover_alias&quot;</span>: <span class="string">&quot;nginx_logs&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>必须。这一步需要手动创建第一个滚动index，以滚动的alias开始（这里是nginx_logs）后续以数字结尾。</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">PUT nginx_logs-000001</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;aliases&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;nginx_logs&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;is_write_index&quot;</span>:<span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>非必须。生命周期策略默认10分钟执行一次，这里为了更快看到效果，改为10s执行。</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">PUT _cluster/settings</span><br><span class="line">  &#123;</span><br><span class="line">  <span class="attr">&quot;persistent&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;indices.lifecycle.poll_interval&quot;</span>:<span class="string">&quot;10s&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>重复插入demo数据多次，模拟多条日志入库效果，按照文档中的配置，这里需要提交10次以上才能看到滚动的效果 。</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">POST nginx_logs/_doc</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;abbc&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>最后查看rollover结果</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">GET _cat/indices/nginx_logs?v</span><br></pre></td></tr></table></figure><p>40s内<br><img src="/2020/11/16/es%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E7%AE%A1%E7%90%86%EF%BC%88%E7%AE%80%E5%8D%95%E7%89%88%EF%BC%89/rollover.jpg" alt="40s内的分段情况"></p><p>超过规定的时间后，就剩下了一个index<br><img src="/2020/11/16/es%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E7%AE%A1%E7%90%86%EF%BC%88%E7%AE%80%E5%8D%95%E7%89%88%EF%BC%89/rollover2.jpg" alt="超过规定时间后的分段情况"></p></li></ul><p>至此我们完成了单节点的生命周期管理</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;软件：ELK7.1.1&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h3&gt;&lt;p&gt;对于单节点进行生命周期管理，一般只是想自动删除过</summary>
      
    
    
    
    <category term="技术" scheme="https://shanjianyinxian.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="ELK" scheme="https://shanjianyinxian.gitee.io/categories/%E6%8A%80%E6%9C%AF/ELK/"/>
    
    
    <category term="ELK" scheme="https://shanjianyinxian.gitee.io/tags/ELK/"/>
    
    <category term="elasticsearch" scheme="https://shanjianyinxian.gitee.io/tags/elasticsearch/"/>
    
    <category term="kibana" scheme="https://shanjianyinxian.gitee.io/tags/kibana/"/>
    
    <category term="生命周期管理" scheme="https://shanjianyinxian.gitee.io/tags/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>0328. 奇偶链表</title>
    <link href="https://shanjianyinxian.gitee.io/2020/11/13/0328-%E5%A5%87%E5%81%B6%E9%93%BE%E8%A1%A8/"/>
    <id>https://shanjianyinxian.gitee.io/2020/11/13/0328-%E5%A5%87%E5%81%B6%E9%93%BE%E8%A1%A8/</id>
    <published>2020-11-13T01:47:14.000Z</published>
    <updated>2020-11-13T01:54:10.556Z</updated>
    
    <content type="html"><![CDATA[<ul><li>链表</li><li>双指针</li><li>哑节点</li></ul><h4 id="328-奇偶链表"><a href="#328-奇偶链表" class="headerlink" title="328. 奇偶链表"></a><a href="https://leetcode-cn.com/problems/odd-even-linked-list/">328. 奇偶链表</a></h4><p>这题双指针，配合哑节点，进行移动，将一个链表重新组装成两个链表，最后偶链表接在奇链表的后面。需要注意的是指针移动的条件，不满足<code>偶数节点为空或偶数节点下节点为空</code> 这种情况下才进行移动。<br><code>!(pOu == null || pOu.next == null)</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">oddEvenList</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        ListNode pJi = head;</span><br><span class="line">        ListNode pOu = head.next;</span><br><span class="line"></span><br><span class="line">        ListNode dummy1 = <span class="keyword">new</span> ListNode();</span><br><span class="line">        ListNode dummy2 = <span class="keyword">new</span> ListNode();</span><br><span class="line">        ListNode tail1 =dummy1;</span><br><span class="line">        ListNode tail2 = dummy2;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            </span><br><span class="line">            tail1.next = pJi;</span><br><span class="line">            tail2.next = pOu;</span><br><span class="line">            tail1 = tail1.next;</span><br><span class="line">            tail2 = tail2.next;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>( !(pOu == <span class="keyword">null</span> || pOu.next == <span class="keyword">null</span>) )&#123;</span><br><span class="line">                pJi = pJi.next.next;</span><br><span class="line">                pOu = pOu.next.next;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            tail1.next = <span class="keyword">null</span>;</span><br><span class="line">            tail2.next = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        tail1.next = dummy2.next;</span><br><span class="line">        <span class="keyword">return</span> dummy1.next;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;链表&lt;/li&gt;
&lt;li&gt;双指针&lt;/li&gt;
&lt;li&gt;哑节点&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;328-奇偶链表&quot;&gt;&lt;a href=&quot;#328-奇偶链表&quot; class=&quot;headerlink&quot; title=&quot;328. 奇偶链表&quot;&gt;&lt;/a&gt;&lt;a href=&quot;htt</summary>
      
    
    
    
    <category term="技术" scheme="https://shanjianyinxian.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="算法" scheme="https://shanjianyinxian.gitee.io/categories/%E6%8A%80%E6%9C%AF/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="leetcode" scheme="https://shanjianyinxian.gitee.io/tags/leetcode/"/>
    
    <category term="双指针" scheme="https://shanjianyinxian.gitee.io/tags/%E5%8F%8C%E6%8C%87%E9%92%88/"/>
    
    <category term="链表" scheme="https://shanjianyinxian.gitee.io/tags/%E9%93%BE%E8%A1%A8/"/>
    
    <category term="哑节点" scheme="https://shanjianyinxian.gitee.io/tags/%E5%93%91%E8%8A%82%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>0206. 反转链表</title>
    <link href="https://shanjianyinxian.gitee.io/2020/11/12/0206-%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/"/>
    <id>https://shanjianyinxian.gitee.io/2020/11/12/0206-%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/</id>
    <published>2020-11-12T12:03:47.000Z</published>
    <updated>2020-11-12T12:18:57.346Z</updated>
    
    <content type="html"><![CDATA[<h4 id="206-反转链表"><a href="#206-反转链表" class="headerlink" title="206. 反转链表"></a><a href="https://leetcode-cn.com/problems/reverse-linked-list/">206. 反转链表</a></h4><blockquote><p>链表哑节点的使用</p></blockquote><p>十分简单的题目，使用哑节点（dummy）</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">reverseList</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        ListNode dummy = <span class="keyword">new</span> ListNode();</span><br><span class="line">        dummy.next = head;</span><br><span class="line">        ListNode newDummy = <span class="keyword">new</span> ListNode();</span><br><span class="line">        newDummy.next = <span class="keyword">null</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(dummy.next != <span class="keyword">null</span>)&#123;</span><br><span class="line">            ListNode p = dummy.next;</span><br><span class="line">            dummy.next = p.next;</span><br><span class="line">            p.next = newDummy.next;</span><br><span class="line">            newDummy.next = p;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> newDummy.next;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;206-反转链表&quot;&gt;&lt;a href=&quot;#206-反转链表&quot; class=&quot;headerlink&quot; title=&quot;206. 反转链表&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/reverse-linked-list</summary>
      
    
    
    
    <category term="技术" scheme="https://shanjianyinxian.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="算法" scheme="https://shanjianyinxian.gitee.io/categories/%E6%8A%80%E6%9C%AF/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="leetcode" scheme="https://shanjianyinxian.gitee.io/tags/leetcode/"/>
    
    <category term="链表" scheme="https://shanjianyinxian.gitee.io/tags/%E9%93%BE%E8%A1%A8/"/>
    
    <category term="哑节点" scheme="https://shanjianyinxian.gitee.io/tags/%E5%93%91%E8%8A%82%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>0865. 具有所有最深节点的最小子树</title>
    <link href="https://shanjianyinxian.gitee.io/2020/11/07/0865-%E5%85%B7%E6%9C%89%E6%89%80%E6%9C%89%E6%9C%80%E6%B7%B1%E8%8A%82%E7%82%B9%E7%9A%84%E6%9C%80%E5%B0%8F%E5%AD%90%E6%A0%91/"/>
    <id>https://shanjianyinxian.gitee.io/2020/11/07/0865-%E5%85%B7%E6%9C%89%E6%89%80%E6%9C%89%E6%9C%80%E6%B7%B1%E8%8A%82%E7%82%B9%E7%9A%84%E6%9C%80%E5%B0%8F%E5%AD%90%E6%A0%91/</id>
    <published>2020-11-07T05:46:55.000Z</published>
    <updated>2020-11-12T12:19:22.024Z</updated>
    
    <content type="html"><![CDATA[<h4 id="865-具有所有最深节点的最小子树"><a href="#865-具有所有最深节点的最小子树" class="headerlink" title="865. 具有所有最深节点的最小子树"></a><a href="https://leetcode-cn.com/problems/smallest-subtree-with-all-the-deepest-nodes/">865. 具有所有最深节点的最小子树</a></h4><blockquote><ul><li>树</li><li>层序遍历</li></ul></blockquote><p>首先按照层序遍历将树按照层拆分成不同的集合。首先判断最后一层，即叶子节点层是否只有一个节点，如果只有一个节点则直接返回叶子节点。然后从倒数第二行开始往根方向遍历，判断当前层的孩子节点是否在往叶子节点方向的下一层。将当前层更新为满足孩子节点在下一层的节点集合。如果当前层只有一个节点满足条件，则直接返回该节点。</p><p>整体的思路类似于不断合并节点。找到最小公共父节点。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, left=None, right=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.left = left</span></span><br><span class="line"><span class="comment">#         self.right = right</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">subtreeWithAllDeepest</span>(<span class="params">self, root: TreeNode</span>) -&gt; TreeNode:</span></span><br><span class="line">        rowList = <span class="built_in">list</span>()</span><br><span class="line">        rowSet = <span class="built_in">set</span>()</span><br><span class="line">        rowSet.add(root)</span><br><span class="line">        rowList.append(rowSet)</span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line">            newRowSet = <span class="built_in">set</span>()</span><br><span class="line">            <span class="keyword">for</span> each <span class="keyword">in</span> rowSet:</span><br><span class="line">                <span class="keyword">if</span> each.left:</span><br><span class="line">                    newRowSet.add(each.left)</span><br><span class="line">                <span class="keyword">if</span> each.right:</span><br><span class="line">                    newRowSet.add(each.right)</span><br><span class="line">            <span class="keyword">if</span> newRowSet:</span><br><span class="line">                rowList.append(newRowSet)</span><br><span class="line">                rowSet = newRowSet</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(rowList) == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> root</span><br><span class="line">        lastSet = rowList[<span class="number">-1</span>]</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(lastSet) == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> lastSet.pop()</span><br><span class="line">        ans = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">for</span> i, eachSet <span class="keyword">in</span> <span class="built_in">enumerate</span>(rowList[<span class="number">-2</span>::<span class="number">-1</span>]):</span><br><span class="line">            newLastSet = <span class="built_in">set</span>()</span><br><span class="line">            <span class="keyword">for</span> eachNode <span class="keyword">in</span> eachSet:</span><br><span class="line">                <span class="keyword">if</span> eachNode.left <span class="keyword">in</span> lastSet <span class="keyword">or</span> eachNode.right <span class="keyword">in</span> lastSet:</span><br><span class="line">                    newLastSet.add(eachNode)</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(newLastSet) == <span class="number">1</span>:</span><br><span class="line">                ans = newLastSet.pop()</span><br><span class="line">                <span class="keyword">return</span> ans</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                lastSet = newLastSet</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;865-具有所有最深节点的最小子树&quot;&gt;&lt;a href=&quot;#865-具有所有最深节点的最小子树&quot; class=&quot;headerlink&quot; title=&quot;865. 具有所有最深节点的最小子树&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode-cn.com/p</summary>
      
    
    
    
    <category term="技术" scheme="https://shanjianyinxian.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="算法" scheme="https://shanjianyinxian.gitee.io/categories/%E6%8A%80%E6%9C%AF/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="leetcode" scheme="https://shanjianyinxian.gitee.io/tags/leetcode/"/>
    
    <category term="树" scheme="https://shanjianyinxian.gitee.io/tags/%E6%A0%91/"/>
    
    <category term="层序遍历" scheme="https://shanjianyinxian.gitee.io/tags/%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86/"/>
    
  </entry>
  
  <entry>
    <title>0116. 填充每个节点的下一个右侧节点指针</title>
    <link href="https://shanjianyinxian.gitee.io/2020/11/06/0116-%E5%A1%AB%E5%85%85%E6%AF%8F%E4%B8%AA%E8%8A%82%E7%82%B9%E7%9A%84%E4%B8%8B%E4%B8%80%E4%B8%AA%E5%8F%B3%E4%BE%A7%E8%8A%82%E7%82%B9%E6%8C%87%E9%92%88/"/>
    <id>https://shanjianyinxian.gitee.io/2020/11/06/0116-%E5%A1%AB%E5%85%85%E6%AF%8F%E4%B8%AA%E8%8A%82%E7%82%B9%E7%9A%84%E4%B8%8B%E4%B8%80%E4%B8%AA%E5%8F%B3%E4%BE%A7%E8%8A%82%E7%82%B9%E6%8C%87%E9%92%88/</id>
    <published>2020-11-06T06:36:45.000Z</published>
    <updated>2020-11-06T06:40:22.277Z</updated>
    
    <content type="html"><![CDATA[<h4 id="116-填充每个节点的下一个右侧节点指针"><a href="#116-填充每个节点的下一个右侧节点指针" class="headerlink" title="116. 填充每个节点的下一个右侧节点指针"></a><a href="https://leetcode-cn.com/problems/populating-next-right-pointers-in-each-node/">116. 填充每个节点的下一个右侧节点指针</a></h4><blockquote><ul><li>双指针</li><li>递归</li></ul></blockquote><p>本题使用层序遍历使用队列可以十分轻松的解决，由于题目中需要常数级别的空间复杂度，因此不使用该方法。按照本题题干中的提示，递归的调用栈所占空间不算空间复杂度。因此使用递归。</p><p>本题使用递归（前序遍历）方法解决：</p><ol><li><p>边界条件<br>如果根节点为null，则返回</p></li><li><p>递归过程<br>为根节点的两个孩子节点找到next</p><p><strong>左孩子节点找next</strong>：由于是完全二叉树，因此父节点一定包含左右两个孩子节点，root.left.next = root.right; 如果该节点为叶子节点则直接返回。</p><p><strong>右孩子节点找next</strong>：如果根节点root的next存在的话；则右孩子节点的next为root.next的左孩子节点。即root.right.next = root.next.left;</p><p>递归执行root.left和root.right</p></li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">// Definition for a Node.</span></span><br><span class="line"><span class="comment">class Node &#123;</span></span><br><span class="line"><span class="comment">    public int val;</span></span><br><span class="line"><span class="comment">    public Node left;</span></span><br><span class="line"><span class="comment">    public Node right;</span></span><br><span class="line"><span class="comment">    public Node next;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    public Node() &#123;&#125;</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    public Node(int _val) &#123;</span></span><br><span class="line"><span class="comment">        val = _val;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    public Node(int _val, Node _left, Node _right, Node _next) &#123;</span></span><br><span class="line"><span class="comment">        val = _val;</span></span><br><span class="line"><span class="comment">        left = _left;</span></span><br><span class="line"><span class="comment">        right = _right;</span></span><br><span class="line"><span class="comment">        next = _next;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Node <span class="title">connect</span><span class="params">(Node root)</span> </span>&#123;</span><br><span class="line">        conn(root);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">conn</span><span class="params">(Node root)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(root.left != <span class="keyword">null</span> &amp;&amp; root.right != <span class="keyword">null</span>)&#123;</span><br><span class="line">            root.left.next = root.right;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(root.next != <span class="keyword">null</span>)&#123;</span><br><span class="line">            root.right.next = root.next.left;</span><br><span class="line">        &#125;</span><br><span class="line">        conn(root.left);</span><br><span class="line">        conn(root.right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;116-填充每个节点的下一个右侧节点指针&quot;&gt;&lt;a href=&quot;#116-填充每个节点的下一个右侧节点指针&quot; class=&quot;headerlink&quot; title=&quot;116. 填充每个节点的下一个右侧节点指针&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode</summary>
      
    
    
    
    <category term="技术" scheme="https://shanjianyinxian.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="算法" scheme="https://shanjianyinxian.gitee.io/categories/%E6%8A%80%E6%9C%AF/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="leetcode" scheme="https://shanjianyinxian.gitee.io/tags/leetcode/"/>
    
    <category term="双指针" scheme="https://shanjianyinxian.gitee.io/tags/%E5%8F%8C%E6%8C%87%E9%92%88/"/>
    
    <category term="递归" scheme="https://shanjianyinxian.gitee.io/tags/%E9%80%92%E5%BD%92/"/>
    
  </entry>
  
  <entry>
    <title>0057. 插入区间</title>
    <link href="https://shanjianyinxian.gitee.io/2020/11/06/0057-%E6%8F%92%E5%85%A5%E5%8C%BA%E9%97%B4/"/>
    <id>https://shanjianyinxian.gitee.io/2020/11/06/0057-%E6%8F%92%E5%85%A5%E5%8C%BA%E9%97%B4/</id>
    <published>2020-11-06T06:25:05.000Z</published>
    <updated>2020-11-06T06:40:37.440Z</updated>
    
    <content type="html"><![CDATA[<h4 id="57-插入区间"><a href="#57-插入区间" class="headerlink" title="57. 插入区间"></a><a href="https://leetcode-cn.com/problems/insert-interval/">57. 插入区间</a></h4><blockquote><p>大美兴，川普王！🤩</p><ul><li>朴素</li></ul></blockquote><p>这条hard题看完就知道咋做，一度怀疑自己是不是想的太简单了。直接看题解发现就是这么简单。。。</p><p>思路很简单，初始化合并区间的开始与结束为新插入区间newInterval的开始与结束，如果新插入区间的开始在某个已有区间内，则该已有区间的开始为合并区间的开始。如果新插入区间的结束在某个已有区间内，则该已有区间的结束为合并区间的结束，并将合并区间加入答案列表。</p><p>处理几个边界条件：</p><ul><li>如果新插入区间的结束不在某个已有区间内，则判断到newBack &lt; currPrev 时先将合并区间进入答案列表。</li><li>如果遍历完了还是没有插入合并区间，则在答案输出前将合并区间进入答案列表。</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[][] insert(<span class="keyword">int</span>[][] intervals, <span class="keyword">int</span>[] newInterval) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> newPrev = newInterval[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> newBack = newInterval[<span class="number">1</span>];</span><br><span class="line">        </span><br><span class="line">        List&lt;<span class="keyword">int</span>[]&gt; ansList = <span class="keyword">new</span> ArrayList&lt;<span class="keyword">int</span>[]&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> mixPrev = newPrev;</span><br><span class="line">        <span class="keyword">int</span> mixBack = newBack;</span><br><span class="line">        <span class="keyword">boolean</span> isInsert = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span>[] i : intervals) &#123;</span><br><span class="line">            <span class="keyword">int</span> currPrev = i[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">int</span> currBack = i[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span>(currBack &lt; newPrev)&#123;</span><br><span class="line">                ansList.add(i);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>( currPrev &lt;= newPrev &amp;&amp; newPrev &lt;= currBack)&#123;</span><br><span class="line">                mixPrev = currPrev;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>( currPrev &lt;= newBack &amp;&amp; newBack &lt;= currBack)&#123;</span><br><span class="line">                mixBack = currBack;</span><br><span class="line">                ansList.add(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;mixPrev,mixBack&#125;);</span><br><span class="line">                isInsert = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(newBack &lt; currPrev )&#123;</span><br><span class="line">                <span class="keyword">if</span>(isInsert == <span class="keyword">false</span>)&#123;</span><br><span class="line">                    ansList.add(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;mixPrev,mixBack&#125;);</span><br><span class="line">                    isInsert = <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                ansList.add(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(isInsert == <span class="keyword">false</span>)&#123;</span><br><span class="line">            ansList.add(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;mixPrev,mixBack&#125;);</span><br><span class="line">            isInsert = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> [][]ans = <span class="keyword">new</span> <span class="keyword">int</span>[ansList.size()][<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ans.length; i++) &#123;</span><br><span class="line">            ans[i] = ansList.get(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;57-插入区间&quot;&gt;&lt;a href=&quot;#57-插入区间&quot; class=&quot;headerlink&quot; title=&quot;57. 插入区间&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/insert-interval/&quot;&gt;57. </summary>
      
    
    
    
    <category term="技术" scheme="https://shanjianyinxian.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="算法" scheme="https://shanjianyinxian.gitee.io/categories/%E6%8A%80%E6%9C%AF/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="leetcode" scheme="https://shanjianyinxian.gitee.io/tags/leetcode/"/>
    
    <category term="朴素" scheme="https://shanjianyinxian.gitee.io/tags/%E6%9C%B4%E7%B4%A0/"/>
    
  </entry>
  
  <entry>
    <title>0052. N皇后 II</title>
    <link href="https://shanjianyinxian.gitee.io/2020/11/06/0052-N%E7%9A%87%E5%90%8E%20II/"/>
    <id>https://shanjianyinxian.gitee.io/2020/11/06/0052-N%E7%9A%87%E5%90%8E%20II/</id>
    <published>2020-11-06T06:12:55.000Z</published>
    <updated>2020-11-06T06:41:18.243Z</updated>
    
    <content type="html"><![CDATA[<h4 id="52-N皇后-II"><a href="#52-N皇后-II" class="headerlink" title="52. N皇后 II"></a><a href="https://leetcode-cn.com/problems/n-queens-ii/">52. N皇后 II</a></h4><blockquote><ul><li>N皇后</li><li>位运算</li><li>DFS</li></ul></blockquote><p>看的网上别人的思路自己复现出来的结果。充分运用位运算和深度优先搜索。用位运算表示当前位置能否放置棋子的情况，0表示未放置棋子，1表示不能放置棋子。</p><p>比如一个8位的棋盘，未放置任何棋子时第一行为00000000，若第四个位置放置了棋子。则变为00010000。第二行可以放置棋子的情况变成00111000。这是由于第一行的第四个位置放置了棋子，因此这个棋子的左下角第二行第三位，正下方第二行第四位和右下角第二行第五位都无法放置棋子。顺延下去，左下角的左下角：第三行第二位；正下方的正下方：第三行第四位；因此思路中使用了三个变量，left表示左斜下方的不可放置位，right表示右斜下方的不可放置位，col表示垂直列的不可放置位。</p><p>按照上文的例子第一行为00010000。则第二行left为00100000由上一行左移一位得到，col为00010000，right为00001000由上一行右移一位得到，因此第二行的可放置位情况为(left | right | col)，即00111000。left，right如同水纹散开分别进行左移右移。与此同时第二行插入新的棋子，即表示当前产生了新的“水纹”。因此newleft = (left | colbit) &lt;&lt; 1；newright = (right | colbit) &gt;&gt; 1;colbit表示插入的新的棋子位置。因此之后的“水纹”是新“水纹”和旧“水纹”的融合。列的情况比较简单。</p><p>使用深度优先搜索（dfs）进行整个运算过程。深度优先搜索的过程中，判断可插入位置是否还有空余位置可以插入，如果没能执行完最后一行就已经没有位置了，说明之前的插入方法不对。程序执行完自然返回并且无任何操作。如果已经执行完成了最后一行if(row &gt;= n)，则最终的结果+1并且直接返回。</p><p>注意：移位运算符的优先级低于加减乘除，因此需要注意在需要的地方加上括号。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> ans;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">totalNQueens</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        currentLine(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,n);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//left表示左斜已被插入位置，right表示右斜已被插入位置，col表示垂直已被插入位置。0表示未被插入，1表示已插入</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">currentLine</span><span class="params">(<span class="keyword">int</span> left,<span class="keyword">int</span> right, <span class="keyword">int</span> row, <span class="keyword">int</span> col, <span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(row &gt;= n) &#123;</span><br><span class="line">            ans++;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//计算当前的可插入情况。1为可插入 0为不可插入</span></span><br><span class="line">        <span class="keyword">int</span> current = ~(left | right | col) &amp; ((<span class="number">1</span>&lt;&lt;n) -<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">while</span>(current &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> colbit = current &amp; - current;</span><br><span class="line">            <span class="keyword">int</span> newleft = (left | colbit) &lt;&lt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> newright = (right | colbit) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> newcol = col | colbit;</span><br><span class="line">            <span class="keyword">int</span> newrow = row + <span class="number">1</span>;</span><br><span class="line">            currentLine(newleft,newright,newrow,newcol,n);</span><br><span class="line">        </span><br><span class="line">            current = current &amp; (current - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;52-N皇后-II&quot;&gt;&lt;a href=&quot;#52-N皇后-II&quot; class=&quot;headerlink&quot; title=&quot;52. N皇后 II&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/n-queens-ii/&quot;&gt;52</summary>
      
    
    
    
    <category term="技术" scheme="https://shanjianyinxian.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="算法" scheme="https://shanjianyinxian.gitee.io/categories/%E6%8A%80%E6%9C%AF/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="N皇后" scheme="https://shanjianyinxian.gitee.io/tags/N%E7%9A%87%E5%90%8E/"/>
    
    <category term="位运算" scheme="https://shanjianyinxian.gitee.io/tags/%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
    
    <category term="DFS" scheme="https://shanjianyinxian.gitee.io/tags/DFS/"/>
    
    <category term="leetcode" scheme="https://shanjianyinxian.gitee.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Kibana的Monitoring不进行数据的收集和监控</title>
    <link href="https://shanjianyinxian.gitee.io/2020/11/05/Kibana%E7%9A%84Monitoring%E4%B8%8D%E8%BF%9B%E8%A1%8C%E6%95%B0%E6%8D%AE%E7%9A%84%E6%94%B6%E9%9B%86%E5%92%8C%E7%9B%91%E6%8E%A7/"/>
    <id>https://shanjianyinxian.gitee.io/2020/11/05/Kibana%E7%9A%84Monitoring%E4%B8%8D%E8%BF%9B%E8%A1%8C%E6%95%B0%E6%8D%AE%E7%9A%84%E6%94%B6%E9%9B%86%E5%92%8C%E7%9B%91%E6%8E%A7/</id>
    <published>2020-11-05T02:42:55.000Z</published>
    <updated>2020-11-05T03:20:15.519Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>软件：ELK7.1.1</p></blockquote><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>Kibana的Monitoring不进行数据的收集和监控，配置正确的情况下无法找到监控的数据。出现了如下的问题：</p><p><img src="/2020/11/05/Kibana%E7%9A%84Monitoring%E4%B8%8D%E8%BF%9B%E8%A1%8C%E6%95%B0%E6%8D%AE%E7%9A%84%E6%94%B6%E9%9B%86%E5%92%8C%E7%9B%91%E6%8E%A7/1.jpg" alt="Kibana的Monitoring不进行数据的收集和监控"></p><hr><h3 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h3><p>根据网上人的说法，有 ingest node 问题，还有配置文件不正确等。我这里提供一个新的思路。这是由于服务器与客户端的时间不同步造成的。<br><img src="/2020/11/05/Kibana%E7%9A%84Monitoring%E4%B8%8D%E8%BF%9B%E8%A1%8C%E6%95%B0%E6%8D%AE%E7%9A%84%E6%94%B6%E9%9B%86%E5%92%8C%E7%9B%91%E6%8E%A7/2.jpg" alt="由于服务器与客户端的时间不同步"></p><p>比如这里差了80分钟，将kibana监控界面的时间窗跨度扩大到80分钟以上时候即可得到数据。因此需要注意服务器的时间同步。</p><hr><h3 id="其他相关解决方案"><a href="#其他相关解决方案" class="headerlink" title="其他相关解决方案"></a>其他相关解决方案</h3><p><a href="https://elasticsearch.cn/question/7661">未打开 ingest node</a> </p><p><a href="https://github.com/elastic/kibana/issues/14398">GitHub讨论</a></p><p><a href="https://www.golinuxcloud.com/install-configure-metricbeat-monitor-cluster/#Error_Unable_to_find_the_cluster_in_the_selected_time_range_UUID">配置文件中监控数据收集时间过短</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;软件：ELK7.1.1&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h3&gt;&lt;p&gt;Kibana的Monitoring不进行数据的收</summary>
      
    
    
    
    <category term="技术" scheme="https://shanjianyinxian.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="ELK" scheme="https://shanjianyinxian.gitee.io/categories/%E6%8A%80%E6%9C%AF/ELK/"/>
    
    
    <category term="ELK" scheme="https://shanjianyinxian.gitee.io/tags/ELK/"/>
    
    <category term="kibana" scheme="https://shanjianyinxian.gitee.io/tags/kibana/"/>
    
  </entry>
  
  <entry>
    <title>centos安装jdk1.8</title>
    <link href="https://shanjianyinxian.gitee.io/2020/10/30/centos%E5%AE%89%E8%A3%85jdk1.8/"/>
    <id>https://shanjianyinxian.gitee.io/2020/10/30/centos%E5%AE%89%E8%A3%85jdk1.8/</id>
    <published>2020-10-30T06:28:11.000Z</published>
    <updated>2020-10-30T06:52:12.217Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>操作系统：centos7<br>软件：jdk1.8</p></blockquote><p>这里简单记录了当时自己安装jdk1.8的过程。</p><hr><ol><li><p>将jdk解压至/usr/local/路径下</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> tar -zxvf jdk-8u152-linux-x64.tar.gz -C /usr/<span class="built_in">local</span>/</span></span><br></pre></td></tr></table></figure></li><li><p>设置环境变量</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vim /etc/profile </span></span><br></pre></td></tr></table></figure><p>末尾加入</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export JAVA_HOME=/usr/share/jdk1.8.0_152</span><br><span class="line">export JRE_HOME=$&#123;JAVA_HOME&#125;/jre</span><br><span class="line">export PATH=$JAVA_HOME/bin:$PATH</span><br><span class="line">export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br></pre></td></tr></table></figure></li><li><p>使环境变量生效</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">source</span> /etc/profile</span></span><br></pre></td></tr></table></figure></li><li><p>添加软连接</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ln -s /usr/<span class="built_in">local</span>/jdk1.8.0_152/bin/java /usr/bin/java</span></span><br></pre></td></tr></table></figure></li><li><p>检查是否安装成功</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> java -version</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;操作系统：centos7&lt;br&gt;软件：jdk1.8&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这里简单记录了当时自己安装jdk1.8的过程。&lt;/p&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;将jdk解压至/usr/local/路径下&lt;/p&gt;
&lt;figur</summary>
      
    
    
    
    <category term="技术" scheme="https://shanjianyinxian.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="linux" scheme="https://shanjianyinxian.gitee.io/categories/%E6%8A%80%E6%9C%AF/linux/"/>
    
    <category term="java" scheme="https://shanjianyinxian.gitee.io/categories/%E6%8A%80%E6%9C%AF/java/"/>
    
    
    <category term="linux" scheme="https://shanjianyinxian.gitee.io/tags/linux/"/>
    
    <category term="java" scheme="https://shanjianyinxian.gitee.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>我的第一篇博客</title>
    <link href="https://shanjianyinxian.gitee.io/2020/10/29/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
    <id>https://shanjianyinxian.gitee.io/2020/10/29/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</id>
    <published>2020-10-29T12:46:32.000Z</published>
    <updated>2020-10-29T12:46:32.592Z</updated>
    
    <content type="html"><![CDATA[<p>欢迎来到我的博客，建站费了一些功夫，好在终于弄完了。主要记录兴趣，生活和技术笔记，希望多多交流。</p><p>最后，欢迎来到程小罗的虎啸山庄！o(<em>￣▽￣</em>)ブ</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;欢迎来到我的博客，建站费了一些功夫，好在终于弄完了。主要记录兴趣，生活和技术笔记，希望多多交流。&lt;/p&gt;
&lt;p&gt;最后，欢迎来到程小罗的虎啸山庄！o(&lt;em&gt;￣▽￣&lt;/em&gt;)ブ&lt;/p&gt;
</summary>
      
    
    
    
    <category term="生活" scheme="https://shanjianyinxian.gitee.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="随笔" scheme="https://shanjianyinxian.gitee.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://shanjianyinxian.gitee.io/2020/10/28/hello-world/"/>
    <id>https://shanjianyinxian.gitee.io/2020/10/28/hello-world/</id>
    <published>2020-10-28T13:31:56.676Z</published>
    <updated>2020-10-28T13:31:56.676Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
